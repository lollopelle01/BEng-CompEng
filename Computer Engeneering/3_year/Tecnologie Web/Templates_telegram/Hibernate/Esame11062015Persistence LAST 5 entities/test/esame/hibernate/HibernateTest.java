package esame.hibernate;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.criterion.Restrictions;
import org.hibernate.dialect.Dialect;
import org.hibernate.jdbc.util.FormatStyle;
import org.hibernate.jdbc.util.Formatter;

import esame.hibernate.beans.Accertamento;
import esame.hibernate.beans.Paziente;
import esame.hibernate.beans.RichiestaMedica;
import esame.hibernate.beans.Struttura;
import esame.hibernate.beans.TipoAccertamento;


public class HibernateTest {

	private static Configuration configuration;
	private static SessionFactory sessionFactory;

	public static void main(String[] args) {
		configuration = new Configuration().configure();
		sessionFactory = configuration.buildSessionFactory();
		
		//DA ELIMINARE!
//		generateDdlStatements();
		
		//JDBC DROP AND CREATE
		Connection conn = null;
		Statement st = null;
		try {
			// DB2 dal LAB
			// Class.forName("COM.ibm.db2.jdbc.app.DB2Driver").newInstance();
			// String url = "jdbc:db2:tw_stud";

			// DB2 da remoto
			Class.forName("com.ibm.db2.jcc.DB2Driver");
			String url = "jdbc:db2://diva.deis.unibo.it:50000/tw_stud";
			
			String username = "00718825";
			String password = "*";

			conn = DriverManager.getConnection(url, username, password);
			//Imposto la transazione se non riesco a creare i mapping a causa dei riferimenti
			// conn.setAutoCommit(false);
			st = conn.createStatement();

			List<String> queries = new ArrayList<>();

			
			queries.add("drop table accertamento");
			queries.add("drop table paziente");
			queries.add("drop table richiestamedica");
			queries.add("drop table struttura");
			queries.add("drop table tipoaccertamento");
			queries.add("drop table tipoaccertamento_struttura");
			for (String query : queries) {
				System.out.println(query);
				try {
					st.executeUpdate(query);
				} catch (Exception e) {
					//Non faccio nulla perchè un'eccezione a questo punto significa che la tabella non esisteva, vado avanti
				}
			}


			queries = new ArrayList<>();
			queries.add("create table paziente (id integer generated by default as identity, codicefiscale varchar(255), nome varchar(255), cognome varchar(255), sesso varchar(255), primary key (id))");
			queries.add("create table richiestamedica (id integer generated by default as identity, nomemedico varchar(255), data timestamp, codicepaziente integer not null references paziente, primary key (id))");
			queries.add("create table struttura (id integer generated by default as identity, codice varchar(255), nome varchar(255), indirizzo varchar(255), primary key (id))");
			queries.add("create table tipoaccertamento (id integer generated by default as identity, codice varchar(255), descrizione varchar(255), primary key (id))");
			queries.add("create table tipoaccertamento_struttura (idstruttura integer not null references struttura, idtipoaccertamento integer not null references tipoaccertamento, primary key (idstruttura, idtipoaccertamento))");
			queries.add("create table accertamento (id integer generated by default as identity, codice varchar(255), esito varchar(255), richiestamedica integer not null references richiestamedica, tipoaccertamento integer not null references tipoaccertamento, primary key (id))");
			for (String query : queries) {
				System.out.println(query);
				st.executeUpdate(query);
			}
			// conn.commit();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (st != null)
					st.close();
				if (conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		//JDBC DROP AND CREATE
		
		
//		//HIBERNATE DROP AND CREATE
//		Session session = null;
//		Transaction tx = null;
//		try {
//			session = sessionFactory.openSession();
//			tx = session.beginTransaction();
//
//			List<String> queries = new ArrayList<>();
//
//			
//			queries.add("drop table uno_due");
//			queries.add("drop table uno");
//			queries.add("drop table due");
//			queries.add("drop table tre");
//			for (String query : queries) {
//				try {
//					session.createSQLQuery(query).executeUpdate();
//				} catch (Exception e) {
//					//Non faccio nulla perchè un'eccezione a questo punto significa che la tabella non esisteva, vado avanti
//				}
//			}
//			
//			queries = new ArrayList<>();
//			queries.add("create table uno (id integer generated by default as identity, uno1 varchar(255), uno2 varchar(255), primary key (id))");
//			queries.add("create table due (id integer generated by default as identity, due1 varchar(255), due2 varchar(255), primary key (id))");
//			queries.add("create table tre (id integer generated by default as identity, tre1 varchar(255), tre2 varchar(255), iddue integer, primary key (id))");
//			queries.add("create table uno_due (iduno integer not null, iddue integer not null, primary key (iddue, iduno))");
//			
//			
//			for (String query : queries) {
//				session.createSQLQuery(query).executeUpdate();
//			}
//
//			tx.commit();
//		} catch (Exception e) {
//			if (tx != null) {
//				try {
//					tx.rollback();
//				} catch (Exception e2) {
//					e2.printStackTrace();
//				}
//			}
//			e.printStackTrace();
//		} finally {
//			session.close();
//		}
//		//HIBERNATE DROP AND CREATE
//		
//		
		//AGGIUNGO TUPLE
		Session session = null;
		Transaction tx = null;
//		session = null;
		try {
			session = sessionFactory.openSession();
			tx = session.beginTransaction();
			
			Paziente paz1 = new Paziente("A", "Nome1", "Cognome1", "Maschio");
			Paziente paz2 = new Paziente("B", "Nome2", "Cognome2", "Maschio");
			Paziente paz3 = new Paziente("C", "Nome3", "Cognome3", "Femmina");
			session.persist(paz1);
			session.persist(paz2);
			session.persist(paz3);
			
			RichiestaMedica rich1 = new RichiestaMedica(paz1, utils.Utils.randomJavaDate(), "Medico1");
			RichiestaMedica rich2 = new RichiestaMedica(paz2, utils.Utils.randomJavaDate(), "Medico2");
			RichiestaMedica rich3 = new RichiestaMedica(paz3, utils.Utils.randomJavaDate(), "Medico1");
			session.persist(rich1);
			session.persist(rich2);
			session.persist(rich3);
			paz1.getRichiesteMediche().add(rich1);
			paz2.getRichiesteMediche().add(rich2);
			paz3.getRichiesteMediche().add(rich3);
			
			Accertamento ac1 = new Accertamento("A1", "Tutto ok");
			Accertamento ac2 = new Accertamento("A2", "Qualcosa non va");
			Accertamento ac3 = new Accertamento("A3", "Esito negativo");
			ac1.setRichiestamedica(rich1);
			ac2.setRichiestamedica(rich2);
			ac3.setRichiestamedica(rich3);
			rich1.getAccertamenti().add(ac1);
			rich2.getAccertamenti().add(ac2);
			rich3.getAccertamenti().add(ac3);
			
			TipoAccertamento ta1 = new TipoAccertamento("T1", "tipo1");
			TipoAccertamento ta2 = new TipoAccertamento("T2", "tipo2");
			TipoAccertamento ta3 = new TipoAccertamento("T3", "Risonanza");
			ta1.getAccertamenti().add(ac1);
			session.persist(ta1);
			session.persist(ta2);
			session.persist(ta3);
			ta2.getAccertamenti().add(ac2);
			ta3.getAccertamenti().add(ac3);
			ac1.setTipoaccertamento(ta1);
			ac2.setTipoaccertamento(ta2);
			ac3.setTipoaccertamento(ta3);
			session.persist(ac1);
			session.persist(ac2);
			session.persist(ac3);
			
			Struttura s1 = new Struttura("S1", "strut1", "indirizzo1");
			Struttura s2 = new Struttura("S2", "strut2", "indirizzo2");
			Struttura s3 = new Struttura("S3", "strut3", "indirizzo3");
			session.persist(s1);
			session.persist(s2);
			session.persist(s3);
			s1.getTipiaccertamento().add(ta1);
			s2.getTipiaccertamento().add(ta2);
			s3.getTipiaccertamento().add(ta3);
			ta1.getStrutture().add(s1);
			ta2.getStrutture().add(s2);
			ta3.getStrutture().add(s3);
			
			
			tx.commit();
		} catch (Exception e1) {
			if (tx != null) {
				try {
					tx.rollback();
				} catch (Exception e2) {
					e2.printStackTrace();
				}
			}
			e1.printStackTrace();
		} finally {
			session.close();
		}
		
//		
		PrintWriter writer = null;
		try {
			writer = new PrintWriter("Accertamento.txt");
			printRequestedQueries(writer); //Inserisci qui il nome del file di output
			writer.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	//DA ELIMINARE!
	private static void generateDdlStatements() {
		System.out.println("\n\n----------------- DDL STATEMENTS ------------------------------------");
		{
			Dialect dialect = Dialect.getDialect(configuration.getProperties());
			String[] createSQL = configuration.generateSchemaCreationScript(dialect);
			String[] dropSQL = configuration.generateDropSchemaScript(dialect);

			Formatter formatter = FormatStyle.DDL.getFormatter();
			try (PrintWriter writer = new PrintWriter(new FileOutputStream("ddl.txt"))) {
				for (String string : dropSQL) {
					System.out.println(formatter.format(string)+";");
					writer.println("queries.add(\""+string+"\");");
				}
				System.out.println("\n\n\n");
				writer.println("\n\n\n");
				for (String string : createSQL) {
					System.out.println(formatter.format(string) + ";");
					writer.println("queries.add(\""+string+"\");");
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}
	}
	
	public static void printRequestedQueries(PrintWriter out) {
		//Query richieste:
		Session session = null;
		try {
			session = sessionFactory.openSession();
			
			//Query 1
			//SQL 
			{
				SQLQuery query = session.createSQLQuery("select r.nomemedico as nomemedico, count(*) as num from richiestamedica r, paziente p, accertamento a, tipoaccertamento t where r.codicepaziente = p.id and a.richiestamedica = r.id and a.tipoaccertamento = t.id and p.sesso = 'Femmina' and t.descrizione = 'Risonanza' group by r.nomemedico order by num desc ");
//				query.setString(0, "Femmina");
//				query.setString(1, "Risonanza");
				query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
				List result = query.list();
				out.println("Query 1");
				if (result.size() > 0) {
					Map map = (Map) result.get(0);
					out.println(map.get("NOMEMEDICO") + " ha richiesto "+map.get("NUM")+" accertamenti di tipo risonanza a pazienti di sesso femminile");
				}
			}
			
			//Query 2
			//SQL
//			{
				SQLQuery query = session.createSQLQuery(" select s.nome from struttura as s join tipoaccertamento_struttura ts on (s.id = ts.idstruttura) join tipoaccertamento t on (ts.idtipoaccertamento = t.id) join accertamento a on (t.id = a.tipoaccertamento) join richiestamedica r on (a.richiestamedica = r.id) where r.nomemedico = 'Medico1' and r.data >= '2000-06-01'");
				query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
				List result = query.list();
				out.println("Query 2:");
				for (Object o : result) {
					Map map = (Map) o;
					out.println("Struttura: "+map.get("NOME"));
				}
//			}
			
//			//SQL
//			SQLQuery query = session.createSQLQuery("SELECT due.due1 as due1, COUNT(*) AS NUM from uno, due, uno_due where uno.id = uno_due.iduno and due.id = uno_due.iddue group by due.due1");
//			query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
//			List result = query.list();
//			out.println("Query 1");
//			for (Object o : result) {
//				Map map = (Map) o;
//				out.println(map.get("DUE1") + " e' associato a "+map.get("NUM")+" oggetti uno");
//			}
//			//HQL
//			Query query2 = session.createQuery("from "+Due.class.getSimpleName());
//			List<Due> result2 = query2.list();
//			out.println("Query 1");
//			for (Due due : result2) {
//				out.println(due.getDue1()+" e' associato a "+due.getUnos().size()+" oggetti uno");
//			}
//			//Criteria
//			Criteria criteria = session.createCriteria(Due.class);
//			//criteria.add(Restrictions.eq("lastName", "Gialli"));
//			List<Due> result3 = criteria.list();
//			out.println("Query 1");
//			for (Due due : result3) {
//				out.println(due.getDue1()+" e' associato a "+due.getUnos().size()+" oggetti uno");
//			}
//			
//			
//			
//			//SQL
//			SQLQuery query3 = session.createSQLQuery("SELECT * FROM uno").addEntity(Uno.class);
//			List<Uno> result4 = query3.list();
//			out.println("Query 2");
//			for (Uno uno : result4) {
//				out.println(uno.getUno1() + " contiene:");
//				Set<Tre> tres = new HashSet<>();
//				for (Due due : uno.getDues()) {
//					//HashSet non aggiunge se già presente
//					due.getTres().stream().forEach(tre -> tres.add(tre));
//				}
//				
//				//Stampa
//				for (Tre tre : tres) {
//					out.println(tre.getTre1()+", "+tre.getTre2());
//				}
//				out.println("");
//			}
//			//HQL
//			Query query4 = session.createQuery("from "+Uno.class.getSimpleName());
//			List<Uno> result5 = query4.list();
//			out.println("Query 2");
//			for (Uno uno : result5) {
//				out.println(uno.getUno1() + " contiene:");
//				Set<Tre> tres = new HashSet<>();
//				for (Due due : uno.getDues()) {
//					//HashSet non aggiunge se già presente
//					due.getTres().stream().forEach(tre -> tres.add(tre));
//				}
//				
//				//Stampa
//				for (Tre tre : tres) {
//					out.println(tre.getTre1()+", "+tre.getTre2());
//				}
//				out.println("");
//			}
//			//Criteria
//			Criteria criteria2 = session.createCriteria(Uno.class);
//			//criteria.add(Restrictions.eq("lastName", "Gialli"));
//			List<Uno> result6 = criteria2.list();
//			out.println("Query 2");
//			for (Uno uno : result6) {
//				out.println(uno.getUno1() + " contiene:");
//				Set<Tre> tres = new HashSet<>();
//				for (Due due : uno.getDues()) {
//					//HashSet non aggiunge se già presente
//					due.getTres().stream().forEach(tre -> tres.add(tre));
//				}
//				
//				//Stampa
//				for (Tre tre : tres) {
//					out.println(tre.getTre1()+", "+tre.getTre2());
//				}
//				out.println("");
//			}
			
			
//			Query medicoConPiuRisonanzePerFemmineQuery = session.getNamedQuery("medicoConPiuRisonanzePerFemmine");
//			String medico = (String) medicoConPiuRisonanzePerFemmineQuery.uniqueResult();
//			System.out.println(medico);

//			String sql =
//			"select P.Nome, P.Cognome from Garage G, Macchina M, Proprietario
//			P where G.id=M.garage_id and M.proprietario_id=P.id and
//			G.nomeGarage=:nomeGarage";
//			SQLQuery query = session.createSQLQuery(sql);
//			query.setParameter("nomeGarage", "g1");
//			query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
//			List data = query.list();
//			for (Object object : data) {
//			Map row = (Map) object;
//			System.out.println(row.get("Nome") + " " + row.get("Nognome"));
//			}

//			for(Object o : session.createCriteria(Commissario.class).list()){
//				System.out.println(o);
//			}
//
//			List singleResult = session.createCriteria(ConcorsoTFA.class).add(Restrictions.eq("classeConcorso", "A042")).list();
//			if (!singleResult.isEmpty()) {
//				ConcorsoTFA c = (ConcorsoTFA) singleResult.get(0);
//				System.out.println(c.getCandidati().size());
//				System.out.println(c.getCommissari().stream().map(Commissario::getNome).collect(Collectors.joining(", ")));
//			}

//			Garage garage = (Garage)
//			session.createCriteria(Garage.class).add(Restrictions.eq("nomeGarage",
//			"g1"))
//			.uniqueResult();
//			for (Macchina m : garage.getMacchine()) {
//			System.out.println(m.getProprietario().getNome() + " " +
//			m.getProprietario().getCognome());
//			}

//			HQL Query
//			Query query1 = session.createQuery("from
//			"+Corso.class.getSimpleName()+" where codice= ?");
//			int codice = 26;
//			query1.setInteger(0, codice);
//			System.out.println("Retrieving number of women attending course
//			"+codice+"...");
//			Corso c = (Corso)query1.uniqueResult();
//			if(c != null)
//			{
//			int res = 0;
//			for(Studente s : c.getStudenti())
//			{
//			if(s.getSesso().equals("F"))
//			{
//			res++;
//			}
//			}
//			if(res == 0)
//			{
//			System.out.println("No women are attending course "+codice);
//			}
//			else
//			{
//			System.out.println(res+" women are attending course "+codice);

//			System.out.println("Printing on Studentesse.txt the details of
//			the students just found...");
//			File f = new File("Studentesse.txt");
//			if(!f.exists())
//			{
//			f.createNewFile();
//			}
//			FileOutputStream fos = new FileOutputStream(f);
//			PrintWriter out = new PrintWriter(fos);
//			for(Studente s : c.getStudenti())
//			{
//			if(s.getSesso().equals("F"))
//			{
//			System.out.println(s.getNome()+" "+s.getCognome()+", Nata il
//			"+s.getData_nascita().toString());
//			out.println(s.getNome()+" "+s.getCognome()+", Nata il
//			"+s.getData_nascita().toString());
//			}
//			}
//			out.close();
//			System.out.println("Written to file!");
//			}
//			}

//			Criteria allConcorsi = session.createCriteria(Concorso.class);
//			((List<Concorso>)allConcorsi.list()).stream()
//			.filter(con -> con.getCommissari().stream()
//					.anyMatch(com -> { return com.getMatricola().equals("X0034");}))
//			.findFirst()
//			.ifPresent(con -> {System.out.println("classe: "+con.getClasseConcorso() + " partecipanti:"+con.getCandidati().size());});
//
//			 String sqlInner =
//			 "select C.matricola as matricola, count(CC.concorso_id) as count from candidato C join candidato_concorso CC on C.id=CC.candidato_id group by matricola";
//			 String sqlOuter = "select nome, cognome, count from ("+sqlInner+") as MC, candidato C where MC.matricola = C.matricola";
//			 SQLQuery query = session.createSQLQuery(sqlOuter);
//			 query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
//			 List data = query.list();
//			 BigInteger max = new BigInteger("0");
//			 String result = "Nessuno trovato";
//			 for (Object object : data) {
//				 Map row = (Map) object;
//				 if (max.compareTo((BigInteger)row.get("count"))<0) {
//					 max = (BigInteger)row.get("count");
//					 result = row.get("nome") + " " + row.get("cognome");
//				 }
//			 }
//			 System.out.println("Candidato che ha partecipato a piï¿½ concorsi: " + result);
			
			out.flush();
		} catch (Exception e1) {
			e1.printStackTrace();
		} finally {
			session.close();
		}
	}

}
