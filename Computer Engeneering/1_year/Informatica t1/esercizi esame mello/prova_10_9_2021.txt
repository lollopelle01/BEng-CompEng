Es.1
#include <stdio.h>
#include "list.h"

list nuovaLista (list l1, list l2){
	if (l1=emptylist() || l2=emptylist())
		return emptylist();
	else
		return cons(head(l1)*head(l2), nuovaLista(tail(l1), tail(l2)));
}

int quantiNeg(list P){
	int i=0;
	while(!emprty(P)){
		if(head(P)<0){
			i++;
			P=tail(P);
		}
	}
	return i;
}

int main(){
	int N;
	list l1, l2, l3;
	l1=cons(2, cons(-5, cons(3, emptylist())));
	l2=cons(2, cons(1, cons(-3, emptylist())));
	l3=nuovaLista(l1, l2);
	N=quantiNeg(l3);
	printf("%d\n", N);
	return 0;
}

Es.2
15=00001111
38=00100110
-38=11011010
15-38=11101001=-(00010111)=-23

Es.3
L'output prodotto é:
cane
cono

il main crea la stringa *stringa="cane" e la stringa vuota *post a cui assegna il risultato di modify(stringa).
la funzione modify() crea la stringa *res poi prima conta con un ciclo for quanti caratteri ci sono in *stringa prima del carattere di fine stringa e poi usa quel valore (i=4) per allocare la memora per 5 caratteri (includendo quindi anche \0). poi usa un altro ciclo for in cui legge *stringa carattere per carattere e la posizione del o-esimo carattere é pari allora metterà anche in res, nella medesima posizione, quel carattere altrimenti metterà una 'o'. Alla fine del ciclo viene messa in ultima posizione di *res il carattere di fine stringa e viene ritornato *res come stringa di uscita (*res="cono").
Infine nel main vengono stampati *stringa (che non è stato modificato) e *post="cono".

Es.4
L'output prodotto è:
5

ric(1,2)->-1+ric(3,2)->-1-1+ric(5,2)->-1-1+7=5















