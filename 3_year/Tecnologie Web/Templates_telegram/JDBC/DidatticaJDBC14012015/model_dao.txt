package esame.dao.db2;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Set;

public class #NOMECLASSEDAODB2# implements #NOMECLASSEDAO#
{
	//statement metodi CRUD

		//INSERT
		#INSERT#

		//DELETE
		#DELETE#

		//UPDATE
		#UPDATE#

		//READ
		#READ#

	// -------------------------------------------------------------------------------------

		// create table
		private static String create =
			#CREATE_TABLE#
			;

		//drop table
		#DROPTABLE#



	// implementazione DAO

	@Override
	public void create( #NOMECLASSE# obj) {

		Connection conn = Db2DAOFactory.createConnection();
		try
		{
			PreparedStatement prep_stmt = conn.prepareStatement(insert);
			prep_stmt.clearParameters();

			#INSERT_STATEMENTS#
			prep_stmt.executeUpdate();

			prep_stmt.close();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			Db2DAOFactory.closeConnection(conn);
		}

	}

	// -------------------------------------------------------------------------------------

	@Override
	public #NOMECLASSE# read(long id)
	{
		#NOMECLASSE# result = null;

		if(id<0)
			return result;

		Connection conn=Db2DAOFactory.createConnection();

		try
		{
			PreparedStatement prep_stmt=conn.prepareStatement(read_by_id);
			prep_stmt.clearParameters();
			prep_stmt.setLong(1, id);
			ResultSet rs=prep_stmt.executeQuery();

			if(rs.next())
			{
				#NOMECLASSE# res = new #NOMECLASSE# ();

				#READ_STATEMENTS#
				result = res;
			}

			rs.close();
			prep_stmt.close();
		}

		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			Db2DAOFactory.closeConnection(conn);
		}

		return result;
	}

	// -------------------------------------------------------------------------------------

	@Override
	public boolean update( #NOMECLASSE# obj)
	{
		boolean result = false;
		if (obj==null)
			return result;

		Connection conn = Db2DAOFactory.createConnection();

		try
		{
			PreparedStatement prep_stmt=conn.prepareStatement(update);
			prep_stmt.clearParameters();

			#UPDATE_STATEMENTS#
			prep_stmt.executeUpdate();
			result=true;
			prep_stmt.close();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			Db2DAOFactory.closeConnection(conn);
		}

		return result;
	}

	// -------------------------------------------------------------------------------------

	@Override
	public boolean delete(long id)
	{
		boolean result = false;
		if (id<0)
			return result;

		Connection conn=Db2DAOFactory.createConnection();
		try
		{
			PreparedStatement prep_stmt=conn.prepareStatement(delete);
			prep_stmt.clearParameters();
			prep_stmt.setLong(1,id);
			prep_stmt.executeUpdate();
			result = true;
			prep_stmt.close();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			Db2DAOFactory.closeConnection(conn);
		}

		return result;
	}

	// -------------------------------------------------------------------------------------

	public boolean createTable()
	{
		boolean result = false;
		Connection conn = Db2DAOFactory.createConnection();
		try
		{
			Statement prep_stmt = conn.createStatement();
			prep_stmt.execute(create);
			result = true;
			prep_stmt.close();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			Db2DAOFactory.closeConnection(conn);
		}

		return result;
	}

	// -------------------------------------------------------------------------------------

	public boolean dropTable()
	{
		boolean result=false;
		Connection conn = Db2DAOFactory.createConnection();
		try
		{
			Statement prep_stmt = conn.createStatement();
			prep_stmt.execute(drop);
			result = true;
			prep_stmt.close();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}

		finally
		{
			Db2DAOFactory.closeConnection(conn);
		}

		return result;
	}


	// Metodi Aggiuntivi


}
